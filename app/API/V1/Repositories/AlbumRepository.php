<?php

namespace App\API\V1\Repositories;
use App\Repositories\Repository;
use App\API\V1\Entities\Album;
use Doctrine\ORM\Query\Expr;
use TempestTools\Common\ArrayExpressions\ArrayExpressionBuilder;
use TempestTools\Common\Constants\CommonArrayObjectKeyConstants;
use TempestTools\Common\Contracts\ArrayHelperContract;
use TempestTools\Scribe\Doctrine\Events\GenericEventArgs;

/** @noinspection LongInheritanceChainInspection */

/**
 * AlbumRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class AlbumRepository extends Repository
{
    protected /** @noinspection ClassOverridesFieldOfSuperClassInspection */
        $entity = Album::class;

    public function preStart(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $array = $this->getArrayHelper()->getArray();
        if (!isset($array['repoEvents'])) {
            $array['repoEvents'] = [];
        }
        $array['repoEvents']['preStart'] = $e->getArgs()->getArrayCopy();
    }

    public function preStop(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preStop']=$e;
    }

    public function preCreateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preCreateBatch']=$e;
    }

    public function preCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preCreate']=$e;
    }

    public function validateCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['validateCreate']=$e;
    }

    public function verifyCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['verifyCreate']=$e;
    }

    public function processResultsCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['processResultsCreate']=$e;
    }

    public function postCreate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postCreate']=$e;
    }

    public function postCreateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postCreateBatch']=$e;
    }


    public function preUpdateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preUpdateBatch']=$e;
    }

    public function preUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preUpdate']=$e;
    }

    public function validateUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['validateUpdate']=$e;
    }

    public function verifyUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['verifyUpdate']=$e;
    }

    public function processResultsUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['processResultsUpdate']=$e;
    }

    public function postUpdate(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postUpdate']=$e;
    }

    public function postUpdateBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postUpdateBatch']=$e;
    }


    public function preDeleteBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preDeleteBatch']=$e;
    }

    public function preDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['preDelete']=$e;
    }

    public function validateDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['validateDelete']=$e;
    }

    public function verifyDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['verifyDelete']=$e;
    }

    public function processResultsDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['processResultsDelete']=$e;
    }

    public function postDelete(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postDelete']=$e;
    }

    public function postDeleteBatch(GenericEventArgs $e) {
        /** @noinspection NullPointerExceptionInspection */
        $this->getArrayHelper()->getArray()['repoEvents']['postDeleteBatch']=$e;
    }


    /**
     * @return array
     * @throws \RuntimeException
     */
    public function getTTConfig(): array
    {
        $expr = new Expr();
        /** @noinspection NullPointerExceptionInspection */
        return [
            'default'=>[],
            'guest'=>[
                'extends'=>[':default']
            ],
            'user'=>[
                'extends'=>[':guest']
            ],
            'user/users'=>[
                'extends'=>[':user'],
                'read'=>[
                    'permissions'=>[
                        'placeholders'=>[
                            'placeholderNames'=>[
                                'userResourceId'=>[
                                    'allowed'=>true,
                                    'settings'=>[
                                        'closure'=>ArrayExpressionBuilder::closure(function ($extra){
                                            /** @var ArrayHelperContract $arrayHelper */
                                            $arrayHelper = $extra['arrayHelper'];
                                            return (int)$extra['settings']['value'] === (int)$arrayHelper->parseArrayPath([CommonArrayObjectKeyConstants::USER_KEY_NAME, 'id']);
                                        })
                                    ]
                                ],
                            ]
                        ]
                    ],
                    'query'=>[
                        'innerJoin'=>[
                            'justCurrentUsersAlbums'=>[
                                'join'=>'a.users',
                                'alias'=>'u',
                                'conditionType'=>Expr\Join::WITH,
                                'condition'=>$expr->eq('u.id', ':userResourceId'),
                            ]
                        ]
                    ],
                ]
            ],
            'admin/users'=>[
                'extends'=>[':user/users'],
                'read'=>[
                    'permissions'=>[
                        'placeholders'=>[
                            'placeholderNames'=>[
                                'userResourceId'=>null
                            ]
                        ]
                    ],
                ]
            ],
            'guest/artists'=>[
                'extends'=>[':user'],
                'read'=>[
                    'query'=>[
                        'innerJoin'=>[
                            'justCurrentUsersAlbums'=>[
                                'join'=>'a.artist',
                                'alias'=>'a2',
                                'conditionType'=>Expr\Join::WITH,
                                'condition'=>$expr->eq('a2.id', ':artistResourceId'),
                            ]
                        ]
                    ],
                ]
            ],
            // Below here is for testing purposes only
            'userMyAlbums'=>[
                'extends'=>[':default'],
                'read'=>[
                    'query'=>[
                        'innerJoin'=>[
                            'justCurrentUsersAlbums'=>[
                                'join'=>'a.users',
                                'alias'=>'u',
                                'conditionType'=>Expr\Join::WITH,
                                'condition'=>$expr->eq('u.id', $this->getArrayHelper()->parseArrayPath([CommonArrayObjectKeyConstants::USER_KEY_NAME, 'id'])),
                            ]
                        ]
                    ]
                ]
            ],
            'testing'=>[]
        ];
    }
}
